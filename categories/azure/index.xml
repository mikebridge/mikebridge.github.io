<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on Mike Bridge - Dev Notes</title>
    <link>https://mikebridge.github.io/categories/azure/</link>
    <description>Recent content in Azure on Mike Bridge - Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>mike@bridgecanada.com (Mike Bridge)</managingEditor>
    <webMaster>mike@bridgecanada.com (Mike Bridge)</webMaster>
    <lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mikebridge.github.io/categories/azure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask JSON Input Validation</title>
      <link>https://mikebridge.github.io/post/python-flask-kubernetes-2/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/python-flask-kubernetes-2/</guid>
      <description>We&amp;rsquo;ve created a simple Python microservice using Flask in Part 1. Using that as a starting point, let&amp;rsquo;s take a quick side-trip through input validation before we deploy the whole thing on Kubernetes.
 Code for this can be found on GitHub. Or you can use this template as a starting point.
 Input validation We don&amp;rsquo;t have any validation yet, so let&amp;rsquo;s add that in. We want to have a 400 error of some sort, so let&amp;rsquo;s write a test for it:</description>
    </item>
    
    <item>
      <title>Getting Started with Python Microservices in Flask</title>
      <link>https://mikebridge.github.io/post/python-flask-kubernetes-1/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/python-flask-kubernetes-1/</guid>
      <description>Code for this can be found on GitHub. Or you can use this template as a starting point.
 The Microservice Scenario So here&amp;rsquo;s the situation: you&amp;rsquo;ve added data scientists to your team, and they&amp;rsquo;re coming up with great ideas that they&amp;rsquo;re implementing in jupyter. Lots of these new bits and pieces need to make it into the rest of your non-python system, so you decide that these small bits of logic should be deployed separately as microservices.</description>
    </item>
    
    <item>
      <title>Azure Active Directory with Azure SQL</title>
      <link>https://mikebridge.github.io/post/azure-active-directory-elastic-pool/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/azure-active-directory-elastic-pool/</guid>
      <description>This post describes how to set up user access to Azure SQL Server within an Elastic Pool via Azure Active Directory. Specifically, I want to allow an AD user to connect to an Azure-hosted database with his own Connection String.
 So you&amp;rsquo;ve got users and groups in Azure Active Directory, and you have one or more Azure SQL Servers in an Elastic Pool. How can you grant those AD Users access to your SQL Server databases?</description>
    </item>
    
    <item>
      <title>Wormhole!  Tunnel a Firewalled Machine Onto the Web via Azure</title>
      <link>https://mikebridge.github.io/post/autossh-azure-teamcity/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/autossh-azure-teamcity/</guid>
      <description>This spring I set up a Continuous Deployment pipeline on TeamCity for a DotNet Core / TypeScript / React application which deploys to Azure. It would have been somewhat expensive to host this CD setup in the cloud, considering all the old unused hardware I have sitting in the office. I didn&amp;rsquo;t want to fiddle with the firewall to put these machines online, but fortunately it&amp;rsquo;s fairly easy to set up a tunnel to the outside without needing to touch the firewallâ€”and that&amp;rsquo;s what I&amp;rsquo;ll be describing here.</description>
    </item>
    
  </channel>
</rss>