<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mike Bridge - Dev Notes</title>
    <link>https://mikebridge.github.io/post/</link>
    <description>Recent content in Posts on Mike Bridge - Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>mike@bridgecanada.com (Mike Bridge)</managingEditor>
    <webMaster>mike@bridgecanada.com (Mike Bridge)</webMaster>
    <lastBuildDate>Mon, 10 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mikebridge.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerizing Flask Microservices for Deployment</title>
      <link>https://mikebridge.github.io/post/python-flask-kubernetes-3/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/python-flask-kubernetes-3/</guid>
      <description>We&amp;rsquo;ve created a simple Python microservice using Flask in Part 1 and set up some simple validation in Part 2. In Part 3 we will package up what we&amp;rsquo;ve built in a Docker container so it can be deployed in Kubernetes.
 Code for this can be found on GitHub. Or you can use this template as a starting point.
 Because Flask doesn&amp;rsquo;t handle parallel execution or networking, we need to deploy Flask inside an application server such as uWSGI, and uWSGI will in turn run inside an http server like nginx.</description>
    </item>
    
    <item>
      <title>Flask JSON Input Validation</title>
      <link>https://mikebridge.github.io/post/python-flask-kubernetes-2/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/python-flask-kubernetes-2/</guid>
      <description>We&amp;rsquo;ve created a simple Python microservice using Flask in Part 1. Using that as a starting point, let&amp;rsquo;s take a quick side-trip through input validation before we deploy the whole thing on Kubernetes.
 Code for this can be found on GitHub. Or you can use this template as a starting point.
 Input validation We don&amp;rsquo;t have any validation yet, so let&amp;rsquo;s add that in. We want to have a 400 error of some sort, so let&amp;rsquo;s write a test for it:</description>
    </item>
    
    <item>
      <title>Getting Started with Python Microservices in Flask</title>
      <link>https://mikebridge.github.io/post/python-flask-kubernetes-1/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/python-flask-kubernetes-1/</guid>
      <description>Code for this can be found on GitHub. Or you can use this template as a starting point.
 The Microservice Scenario So here&amp;rsquo;s the situation: you&amp;rsquo;ve added data scientists to your team, and they&amp;rsquo;re coming up with great ideas that they&amp;rsquo;re implementing in jupyter. Lots of these new bits and pieces need to make it into the rest of your non-python system, so you decide that these small bits of logic should be deployed separately as microservices.</description>
    </item>
    
    <item>
      <title>Azure Sql Roles from Azure Active Directory</title>
      <link>https://mikebridge.github.io/post/azuread-azure-sql-roles/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/azuread-azure-sql-roles/</guid>
      <description>If your users are managed in Azure Active Directory, it&amp;rsquo;s fairly straightforward to give them Azure SQL access by assigning them to an Azure Active Directory Group:
1) Create a Group in Azure Active Directory via the Portal or command line. For example, you could name the group SQL ReadOnly
2) Assign Azure AD Users to that group.
3) Now log into the database as an administrator. Note that you need to use your own Azure login to run the subsequent commands&amp;mdash;logging in via password won&amp;rsquo;t work.</description>
    </item>
    
    <item>
      <title>Compress a Folder in PowerShell for use in Linux</title>
      <link>https://mikebridge.github.io/post/windows-tar-gzip-for-linux/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/windows-tar-gzip-for-linux/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mikebridge.github.io/images/windows/fresh-tar.gif&#34; alt=&#34;Fresh Tar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I wasted quite a bit of time trying to find the correct way to zip a folder
in PowerShell so that it could later be extracted in a Linux docker
container.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; Turns out the standard unix tar command is now standard-issue in
Windows—no need to use PowerShell functions at all.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clearing React Native Caches</title>
      <link>https://mikebridge.github.io/post/clear-react-native-caches/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/clear-react-native-caches/</guid>
      <description>Unable to resolve module `@blah/whatever` from `whatever.js`: Module `@blah/whatever` does not exist in the Haste module map  What?
ReactNative development is an endless stream of inscrutable, never-before-seen errors. The promise of RN is that a developer can stay in the TypeScript or JavaScript zone and ignore the ugly details of mobile development, but that rarely lasts for long. Those brief, lovely stretches of productive coding are frequently interrupted by long stretches of dealing with compilation errors, gradle configuration and Java or Swift dependency conflicts.</description>
    </item>
    
    <item>
      <title>Azure Active Directory with Azure SQL</title>
      <link>https://mikebridge.github.io/post/azure-active-directory-elastic-pool/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/azure-active-directory-elastic-pool/</guid>
      <description>This post describes how to set up user access to Azure SQL Server within an Elastic Pool via Azure Active Directory. Specifically, I want to allow an AD user to connect to an Azure-hosted database with his own Connection String.
 So you&amp;rsquo;ve got users and groups in Azure Active Directory, and you have one or more Azure SQL Servers in an Elastic Pool. How can you grant those AD Users access to your SQL Server databases?</description>
    </item>
    
    <item>
      <title>Wormhole!  Tunnel a Firewalled Machine Onto the Web via Azure</title>
      <link>https://mikebridge.github.io/post/autossh-azure-teamcity/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/autossh-azure-teamcity/</guid>
      <description>This spring I set up a Continuous Deployment pipeline on TeamCity for a DotNet Core / TypeScript / React application which deploys to Azure. It would have been somewhat expensive to host this CD setup in the cloud, considering all the old unused hardware I have sitting in the office. I didn&amp;rsquo;t want to fiddle with the firewall to put these machines online, but fortunately it&amp;rsquo;s fairly easy to set up a tunnel to the outside without needing to touch the firewall—and that&amp;rsquo;s what I&amp;rsquo;ll be describing here.</description>
    </item>
    
    <item>
      <title>An Rx Event Aggregator in C#</title>
      <link>https://mikebridge.github.io/post/csharp-domain-event-aggregator/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/csharp-domain-event-aggregator/</guid>
      <description>I have a web project that is made up of several modules, each of which generates DDD domain events. Right now my C# project is small and divided into well-defined modules which run in a single process, so using a message queue like Kafka is a bit of overkill. But as the program scales, I may break these modules out and run them as full microservices in their own processes. At that point, I will need to use a real messaging system like Kafka or the Azure Event Hub.</description>
    </item>
    
    <item>
      <title>TypeScript and React, Part 5</title>
      <link>https://mikebridge.github.io/post/react-router-4-query-string-hoc/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/react-router-4-query-string-hoc/</guid>
      <description>This is part of this series of blog posts introducing TypeScript and React. Here&amp;rsquo;s Part 1.
 React-router 4 removed the query string parsing feature that was present in past versions. This is a good example of where a React higher order control would make a good substitute. Instead of forcing Components to take dependencies on both the location and a query-string parser, making things hard to test and refactor, it&amp;rsquo;d be much easier to create a wrapper that does the boring parsing work for you and DRYs out your code.</description>
    </item>
    
    <item>
      <title>TypeScript and React, Part 4</title>
      <link>https://mikebridge.github.io/post/getting-started-typescript-react-4/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/getting-started-typescript-react-4/</guid>
      <description>This is part of this series of blog posts introducing TypeScript and React. Here&amp;rsquo;s Part 1.
Edit, Feb 26, 2019: Nobody on the team liked this approach as much as Render Props, so we&amp;rsquo;ve switched to that. Our experience was that HOCs can create mind-bending types.
 React&amp;rsquo;s Higher Order Component pattern is a technique to help developers design better components and component interactions. Refactoring out cross-cutting concerns from a complex component with HOCs touches on at least three or four of the SOLID principles, but creating a cohesive design can be difficult without proper typing.</description>
    </item>
    
    <item>
      <title>TypeScript and React, Part 3</title>
      <link>https://mikebridge.github.io/post/getting-started-typescript-react-3/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/getting-started-typescript-react-3/</guid>
      <description>This is part of this series of blog posts introducing TypeScript and React. Here&amp;rsquo;s Part 1.
 TypeScript&amp;rsquo;s inferred typing gives you some flexibility on how you declare &amp;ldquo;Stateless Function Components&amp;rdquo;. Here are some examples.
Simple:
 If you are wondering what the extra curly braces are for in the parameters of the three examples, myvar and onClick are extracted from props via destructuring assignment. This next one is a little strange, because the types are declared inline.</description>
    </item>
    
    <item>
      <title>TypeScript and React, Part 2</title>
      <link>https://mikebridge.github.io/post/getting-started-typescript-react-2/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/getting-started-typescript-react-2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Part One of this series of blog posts introducing &lt;strong&gt;TypeScript&lt;/strong&gt; and &lt;strong&gt;React&lt;/strong&gt; is &lt;a href=&#34;https://mikebridge.github.io/articles/getting-started-typescript-react/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s not too hard (any more) to get started with TypeScript and React.  This post assumes
that you know a little about JavaScript and a little about React—if you haven&amp;rsquo;t created
an app already you can do it with &lt;a href=&#34;`https://github.com/wmonk/create-react-app-typescript`&#34;&gt;create-react-app-typescript&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TypeScript and React, Part 1</title>
      <link>https://mikebridge.github.io/post/getting-started-typescript-react/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/getting-started-typescript-react/</guid>
      <description>TypeScript with React: is it worth it? I started using them together a few months ago with some hesitation. I wanted the long-term benefits that strong typing brings to a larger code-base, but I always hesitate before wandering off of the main path. When it comes to mainstream software development, it&amp;rsquo;s usually best to stick with the group rather than struggling to survive in the woods on your own. So, on balance, do you gain more than you lose?</description>
    </item>
    
    <item>
      <title>Testing Redux-Observable Epics</title>
      <link>https://mikebridge.github.io/post/typescript-redux-observable-epic-test/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/typescript-redux-observable-epic-test/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a way to test a &lt;a href=&#34;https://redux-observable.js.org/&#34;&gt;redux-observable&lt;/a&gt; epic that
performs an ajax call.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I18N in React with Typescript &amp; React-Intl</title>
      <link>https://mikebridge.github.io/post/typescript-i18n-react-intl/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/typescript-i18n-react-intl/</guid>
      <description>Earlier this week I went in search of a React-friendly i18n library and I spent some time experimenting with react-intl. React-intl is based on FormatJS, which is a library for localizing numbers, dates, and strings. My impression is that react-intl is a fairly small, practical library that is written to make i18n unobtrusive for developers.
 Edit, May 1, 2017
Today I&amp;rsquo;m wondering whether it may have been a mistake to adopt react-intl over the alternatives.</description>
    </item>
    
    <item>
      <title>Debugging React Native/Android with IntelliJ on Windows</title>
      <link>https://mikebridge.github.io/post/intellij-react-native/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/intellij-react-native/</guid>
      <description>Facebook&amp;rsquo;s developers are mostly Apple People, so they don&amp;rsquo;t waste many mental cycles fretting over React-Native developers who are on other platforms. I don&amp;rsquo;t like straying too much from the main path when it comes to deciding on which tools to use, so I wondered if it was advisable—or even possible—to debug React Native at all on Windows. Google Search didn&amp;rsquo;t reveal much information about what Windows React-Native developers do when their app crashes with no error message.</description>
    </item>
    
    <item>
      <title>JWT Tokens, SignalR and Single Page Applications</title>
      <link>https://mikebridge.github.io/post/identityserver4-signalr/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/identityserver4-signalr/</guid>
      <description>A new-ish alternative to session-based cookies that&amp;rsquo;s well-suited to single page apps is token-based authentication.
There are many SaaS services such as Auth0, Stormpath and Login Radius that are pretty easy to set up. If you can use one of those in your organization, you should&amp;mdash;it will save you a lot of time. But if you&amp;rsquo;re stuck hosting your data yourself you will need to look at a product like IdentityServer4 or ForgeRock.</description>
    </item>
    
    <item>
      <title>SignalR and Akka.NET on DotNet Core</title>
      <link>https://mikebridge.github.io/post/signalr-akka/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/signalr-akka/</guid>
      <description>Note: this post is out-of-date&amp;mdash;Akka.NET now runs on Dotnet Core
 Currently there is no DotNet Core runtime support for Akka.NET or SignalR. I was about resign myself to the idea of waiting for another year or so to try them out together in the new environment, but I randomly came across a blog that mentions that you can run non-core libraries on ASP.Net Core — if you target .</description>
    </item>
    
    <item>
      <title>Kinect and Processing</title>
      <link>https://mikebridge.github.io/post/kinect-and-processing/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      <author>mike@bridgecanada.com (Mike Bridge)</author>
      <guid>https://mikebridge.github.io/post/kinect-and-processing/</guid>
      <description>I fell into a discussion with another soccer-dad last weekend as we watched our own children play indoor soccer about teaching kids to code. I talked about my experiences with Raspberry Pi, Scratch and Sonic Pi at the coding club we set up at my son&amp;rsquo;s school, and I mentioned that after reading Generative Art several years ago I pair-programmed some happy faces with my then-seven-year-old son in Processing:</description>
    </item>
    
  </channel>
</rss>